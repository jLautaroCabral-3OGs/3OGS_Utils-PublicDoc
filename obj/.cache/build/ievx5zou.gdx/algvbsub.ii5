<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Caracter&#237;sticas </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Caracter&#237;sticas ">
    <meta name="generator" content="docfx 2.59.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="">
<h1 id="caracter칤sticas" sourcefile="articles/index.md" sourcestartlinenumber="1">Caracter칤sticas</h1>

<h3 id="lc_utils-createkeycodeaction" sourcefile="articles/index.md" sourcestartlinenumber="2">LC_Utils: CreateKeyCodeAction</h3>
<p sourcefile="articles/index.md" sourcestartlinenumber="3">Esta funci칩n es muy tan 칰til como simple, su primer par치metro es una KeyCode y el segundo un Action que se llamar치 al presionar dicha tecla.</p>
<p sourcefile="articles/index.md" sourcestartlinenumber="5">Retorna una instancia de FunctionUpdater, un monobehaviour que viene con el plugin y se explicar치 m치s adelante, por el momento podemos ignorarlo.</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="7">public static FunctionUpdater LC_Utils.CreateKeyCodeAction(KeyCode key, Action onKeyDown)
</code></pre>
<p sourcefile="articles/index.md" sourcestartlinenumber="10">Ejemplo de uso:</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="12">void Start() {
	LC_Utils.CreateKeyCodeAction(KeyCode.A, () =&gt; Debug.Log(&quot;Hello (:-D)&quot;));
}
</code></pre>
<h3 id="lc_utils-cameras--cameraswitcher" sourcefile="articles/index.md" sourcestartlinenumber="17">LC_Utils: Cameras &amp; CameraSwitcher</h3>
<p sourcefile="articles/index.md" sourcestartlinenumber="18">Con el objetivo de navegar r치pidamente por la escena, este plugin te permite instanciar dos tipos de c치mara de espectador en tiempo de ejecuci칩n y con apenas unas l칤neas de c칩digo. Esto es principalmente 칰til en Dev Builds para recorrer la escena libremente y asegurarse de que todo funciona como debe, ya que en una Dev Build no podr치s usar la vista de escena del editor.</p>
<p sourcefile="articles/index.md" sourcestartlinenumber="20">En esta versi칩n existen dos tipos de c치maras;</p>
<h4 id="freelookcamera" sourcefile="articles/index.md" sourcestartlinenumber="22"><strong sourcefile="articles/index.md" sourcestartlinenumber="22">FreeLookCamera</strong></h4>
<p sourcefile="articles/index.md" sourcestartlinenumber="23">Una c치mara de vista libre que se maneja con WASD, el rat칩n, Q y E, al mantener click derecho la c치mara deja de moverse y el cursor del mouse aparece, el cursor del mouse est치 oculto por defecto en esta c치mara. Es parecida a la c치mara de vista libre en Counter Strike.</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="25">public static void LC_Debug.UseFreeLookCamera()
</code></pre>
<p sourcefile="articles/index.md" sourcestartlinenumber="29">Ejemplo de implementaci칩n:</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="31">void Start() {
    if(Input.GetMouseButtonDown(0))
        LC_Debug.UseFreeLookCamera();
}
</code></pre>
<p sourcefile="articles/index.md" sourcestartlinenumber="38">Un mejor ejemplo de implementaci칩n:</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="40">void Start() {
    LC_Utils.CreateKeyCodeAction(KeyCode.F1,
        () =&gt; {
            if (LC_Utils.IsBuildForProduction()) return; // Do nothing
            LC_Debug.UseFreeLookCamera();
        });
}
</code></pre>
<hr sourcefile="articles/index.md" sourcestartlinenumber="50">
<p sourcefile="articles/index.md" sourcestartlinenumber="51">游눠 Momento de imaginaci칩n: Desarrollas un videojuego FPS multijugador online, necesitas probar en una Dev Build que al presionar el bot칩n de un bunker, 4 puertas(a las que tardar칤as
mucho en llegar si caminaras) se cierren, en ese momento puedes activar la FreeLookCamera para comprobar el estado y comportamiento de las puertas y otros jugadores al tratar de
usarlas. Entonces no tendr치s que caminar a ellas cada vez que pruebes. Seguro ya se te ocurrir치n muchos escenarios d칩nde se puede ahorrar mucho tiempo usando una free look camera.</p>
<h4 id="rotatearoundcamera" sourcefile="articles/index.md" sourcestartlinenumber="56"><strong sourcefile="articles/index.md" sourcestartlinenumber="56">RotateAroundCamera</strong></h4>
<p sourcefile="articles/index.md" sourcestartlinenumber="57">Una c치mara que sigue un objetivo y puede rotar al rededor de 칠l, siempre mirando al mismo. Para rotar la c치mara se utiliza el bot칩n central del rat칩n, para hacer zoom se utiliza la rueda. Es parecida a la c치mara que sigue los personajes en Counter Strike.</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="59">public static void LC_Debug.UseRotateAroundTargetCamera(Transform target)
</code></pre>
<p sourcefile="articles/index.md" sourcestartlinenumber="63">Ejemplos de implementaci칩n:</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="65">GameObject anyObject = GameObject.Find(&quot;AnyObject&quot;);

LC_Utils.CreateKeyCodeAction(KeyCode.F2,
    () =&gt; {
        if (LC_Utils.IsBuildForProduction()) return;
        LC_Debug.UseRotateAroundTargetCamera(anyObject.transform);
    });
</code></pre>
<hr sourcefile="articles/index.md" sourcestartlinenumber="74">
<p sourcefile="articles/index.md" sourcestartlinenumber="75">游눠 Momento de imaginaci칩n: Desarrollas un videojuego de aviones de combate multijugador online, necesitas probar en una Dev Build que los aviones y misiles se comporten correctamente, ah칤 es d칩nde entra esta c치mara. Cuando un avi칩n enemigo dispara un misil utilizas la RotateAroundCamera para seguir el objeto misil y evaluar que su comportamiento sea el planeado. Esta c치mara es perfecta para el debug de objetos que se mueven muy r치pido o que se teletransportan.</p>
<h4 id="cameraswitcher" sourcefile="articles/index.md" sourcestartlinenumber="77"><strong sourcefile="articles/index.md" sourcestartlinenumber="77">CameraSwitcher</strong></h4>
<p sourcefile="articles/index.md" sourcestartlinenumber="78">El CameraSwitcher es una peque침a clase encargada de manejar el cambio de c치mara en el plugin. Esta clase tiene apenas 3 m칠todos;</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="80">public static void SetupCurrentCamera(Camera camera)

public static void SetupReturnAction(Action returnToPreviousCameraAction)

public static void SetupReturnAction(Camera camera, Action returnToPreviousCameraAction)

public static void ReturnToOriginalCamera()
</code></pre>
<h5 id="cameraswitchersetupcurrentcameracamera-camera" sourcefile="articles/index.md" sourcestartlinenumber="90"><strong sourcefile="articles/index.md" sourcestartlinenumber="90">CameraSwitcher.SetupCurrentCamera(Camera camera)</strong></h5>
<p sourcefile="articles/index.md" sourcestartlinenumber="92">Este m칠todo es para establecer la current camera, el plugin lo utiliza al crear la FreeLookCamera y RotateAroundCamera.</p>
<h5 id="cameraswitchersetupreturnactionaction-returntopreviouscameraaction" sourcefile="articles/index.md" sourcestartlinenumber="94"><strong sourcefile="articles/index.md" sourcestartlinenumber="94">CameraSwitcher.SetupReturnAction(Action returnToPreviousCameraAction)</strong></h5>
<p sourcefile="articles/index.md" sourcestartlinenumber="96">Est칠 m칠todo es para establecer un callback que se llamar치 luego de llamar al m칠todo ReturnToOriginalCamera()</p>
<p sourcefile="articles/index.md" sourcestartlinenumber="98">El callback podr칤a usarse para restablecer objetos al volver a la c치mara original del jugador. Por ejemplo, quiz치s quieras desactivar la GUI del jugador antes de pasar a la FreeLookCamera, pero al volver a la c치mara original querr칤as volver a activar la GUI, para esto podr칤as usar el callback.</p>
<h5 id="cameraswitchersetupreturnactioncamera-camera-action-returntopreviouscameraaction" sourcefile="articles/index.md" sourcestartlinenumber="101"><strong sourcefile="articles/index.md" sourcestartlinenumber="101">CameraSwitcher.SetupReturnAction(Camera camera, Action returnToPreviousCameraAction)</strong></h5>
<p sourcefile="articles/index.md" sourcestartlinenumber="103">Este m칠todo es el mismo pero puedes especificar otra c치mara a la que volver en vez de la original.</p>
<h5 id="cameraswitcherreturntooriginalcamera" sourcefile="articles/index.md" sourcestartlinenumber="105"><strong sourcefile="articles/index.md" sourcestartlinenumber="105">CameraSwitcher.ReturnToOriginalCamera()</strong></h5>
<p sourcefile="articles/index.md" sourcestartlinenumber="107">Este m칠todo regresa a la c치mara original, se considera a c치mara original a la c치mara por defecto al inicio de la escena.</p>
<h3 id="lc_debug-debugbutton--debugbuttonpanel" sourcefile="articles/index.md" sourcestartlinenumber="110">LC_Debug: DebugButton &amp; DebugButtonPanel</h3>
<p sourcefile="articles/index.md" sourcestartlinenumber="111">DebugButton
Un DebugButton es un bot칩n en el mundo(es decir que no es parte de la UI, no est치 dentro de un canvas). Los DebugButton tienen un Action onClickFunction que se llama al ser presionados. Tambi칠n se les puede asignar un objeto padre de modo que los botones siempre est칠n con el objeto en caso de ser un objeto en movimiento.</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="114">public static GameObject LC_Debug.CreateDebugButton(
													string btnLabel,
													Vector3 position,
													Action onClickFunction,
													bool rotateToCamera = true
													)

public static GameObject LC_Debug.CreateDebugButton(
													Transform parent,
													string btnLabel,
													Vector3 position,
													Action onClickFunction,
													bool rotateToCamera = true
													)
</code></pre>
<p sourcefile="articles/index.md" sourcestartlinenumber="131">Ejemplo de implementaci칩n:</p>
<pre><code sourcefile="articles/index.md" sourcestartlinenumber="133">GameObject btnObj = LC_Debug.CreateDebugButton(&quot;Example&quot;, Vector3.up, () =&gt; Debug.Log(&quot;Example log&quot;));
</code></pre>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                  <li>
                    <a href="https://github.com/jLautaroCabral-3OGs/3OGS_Utils-Doc/blob/master/articles/index.md/#L1" class="contribution-link">Improve this Doc</a>
                  </li>
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
